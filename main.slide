Fallacies Of Distributed Gomputing
http://301.sh/2017-gomputing
14:55 14 Jul 2017
Tags: Go, distributed systems

Michael Hausenblas
Developer Advocate, Red Hat
http://mhausenblas.info
@mhausenblas

* Agenda

- Scope
- General observations
- Case studies
- Conclusions

: The topic of this talk is learning how to do distributed systems in Go.
: For this, we'll have a look at several case studies, distributed systems written in Go.
: It's really more an archeological or forensics-related talk than a visionary one ;)

* Scope

: Let's define what is and what is not in scope.

* In scope for this talk

Go programs …

- running on two or more machines (VMs, containers, etc.)
- using `net/*`
- that need to coordinate their efforts to achieve a result
- with centralized or decentralized control

In short *distributed* *systems* at large …

* In scope for this talk

.image images/types-of-network.png 500 _

Source: [[https://blog.maidsafe.net/2015/12/04/evolving-terminology/][blog.maidsafe.net/2015/12/04/evolving-terminology/]]

* Out of scope for this talk

- [[https://tour.golang.org/concurrency/1][Go routines]]
- [[https://tour.golang.org/concurrency/2][Channels]]
- [[https://golang.org/pkg/sync/#WaitGroup][sync.WaitGroup]]
- [[https://golang.org/pkg/sync/#Mutex][sync.Mutex]]
- [[https://golang.org/pkg/sync/#Pool][sync.Pool]]
- any other local (single-machine) mechanism

* Out of scope for this talk

If you want to learn everything about Go routines, channels, and `sync.*` please
do check out Katherine Cox-Buday's wonderful [[http://shop.oreilly.com/product/0636920046189.do][Concurrency in Go]].
She's got you covered ;)

.image images/concurrency-in-go-book.gif

* General observations

* General observations

- Form follows function
- Fallacies of distributed computing
- Relevant parts of stdlib
- Useful packages beyond stdlib

: Before we have a look at the case studies, some general observations

* Form follows function

_Or:_ _how_ _the_ _programming_ _language_ _choice_ _influences_ _system_ _characteristics_ …

- `HDFS` (Java) vs. `MapR-FS` (C/C++)
- `Kafka` (Scala/Java) vs. `RabbitMQ` (Erlang)
- `etcd` (Go) vs `ZooKeeper` (Java)

.image images/good-cheap-fast.gif 300 _

: A few examples of distributed systems and how the chosen languages impacts operations
: When working at MapR, I saw the performance penalties of the stop-the-world GC of HDFS and esp. HBase vs the C++ based MapR product
: A counter-example is Kafka. It's super fast and high-throughput.
: Last but not least etcd, esp. v3 with new storage engine, utilizing gRPC., etc.

* Fallacies of distributed computing

In a nutshell:

.image images/no-way-its-dns.jpg _ 600

* Fallacies of distributed computing

1. The network is reliable.
2. Latency is zero.
3. Bandwidth is infinite.
4. The network is secure.
5. Topology doesn't change.
6. There is one administrator.
7. Transport cost is zero.
8. The network is homogeneous.

Source: Peter Deutsch (1994), see [[https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing][Wikipedia]]

* Fallacies of distributed computing—addressed

1. The network is reliable ↦ _timeouts_, _error_ _handling_, _retry_ _logic_
2. Latency is zero ↦ _cancelation_, _partial_ _results_
3. Bandwidth is infinite ↦ _CDNs_, _protobuf_  _rather_ _than_ _JSON_
4. The network is secure ↦ _SSL/TLS_, _digital_ _signatures_, _checksums_
5. Topology doesn't change ↦ _DNS_ _vs._ _IP_ _addresses_, _TTL_
6. There is one administrator ↦ _auditing_, _role-based_ _access_, _immutability_
7. Transport cost is zero ↦ _cost_ _of_ _(un)marshalling_
8. The network is homogeneous ↦ _interoperability_ _on_ _all_ _levels_

* Fallacies of distributed computing—addressed in Go

1. The network is reliable ↦ `context.WithTimeout`, `net.OpError`, `syscall.Errno` (?)
2. Latency is zero ↦ `context.WithCancel`, `encoding/json.Decoder.Decode(Stream)`
3. Bandwidth is infinite ↦ `golang/protobuf`
4. The network is secure ↦ `crypto/tls`, `crypto/rsa`, `crypto/sha512`, `crypto/x509`
5. Topology doesn't change ↦ be aware of the [[https://golang.org/pkg/net/#hdr-Name_Resolution][pure Go (DNS) resolver]]
6. There is one administrator ↦ [[https://github.com/casbin/casbin][casbin/casbin]] (authz lib/ACL, RBAC, ABAC), [[https://www.reddit.com/r/golang/comments/2jrwq1/immutability_on_go/][immutability]]
7. Transport cost is zero ↦ performance of `encoding/json.Marshal`? `pprof` it?
8. The network is homogeneous ↦ broad & well-tested stdlib across different OS/archs

* Fallacies of distributed computing

.image images/kalashnikitty.jpg _ 400

_Just_ _a_ _friendly_ _word_ _of_ _warning:_

  If you think now `ah, that's cute but it won't happen to me` … do not underestimate the
  fallacies, otherwise they *will* come back and bite you. Hard.

* What does the stdlib offer?

- [[https://golang.org/pkg/net/][net/*]]
- [[https://golang.org/pkg/encoding][encoding/*]]
- [[https://golang.org/pkg/context/][context]]
- [[https://golang.org/pkg/time/][time]]

* Useful packages beyond stdlib I

modern RPC:
.link http://grpc.io/ gRPC

web sockets:

.link https://github.com/gobwas/ws gobwas/ws

a powerful URL router and dispatcher:
.link https://github.com/gorilla/mux gorilla/mux

* Useful packages beyond stdlib II

SSH client and server:
.link https://godoc.org/golang.org/x/crypto/ssh golang.org/x/crypto/ssh

OAuth2 JSON Web Token flow support:
.link https://godoc.org/golang.org/x/oauth2/jwt golang.org/x/oauth2/jwt

Tracing of requests and long-lived objects:
.link https://godoc.org/golang.org/x/net/trace golang.org/x/net/trace

* Useful packages beyond stdlib III

manage S3-compatible storage systems:
.link https://github.com/minio/minio-go minio/minio-go

access the GitHub API:
.link https://github.com/google/go-github google/go-github

metrics:
.link https://godoc.org/github.com/prometheus/client_golang/prometheus github.com/prometheus/client_golang/prometheus

* Case studies

* Overview case studies

- [[https://github.com/kubernetes/kubernetes/][kubernetes/kubernetes]]
- [[https://github.com/hashicorp/consul][hashicorp/consul]]
- [[https://github.com/coreos/etcd][coreos/etcd]]
- [[https://github.com/cockroachdb/cockroach][cockroachdb/cockroach]]
- [[https://github.com/minio/minio][minio/minio]]

: I've reviewed the following distributed systems, all written in Go in the past couple of years
: Let's now discuss aspects of how above systems address the fallacies of distributed computing using Go

* Overview case studies

All stats taken on 2017-07-06:

.code overview-stats

* Overview case studies

Used [[https://github.com/AlDanial/cloc][cloc]] to generate raw stats:

.code loc-stats

* Kubernetes

.image images/k8s-logo.png _ 200

[[http://kubernetes.io]]—a container orchestration platform

- Google initiated, opinionated, some 70% market share
- Like the kernel for a cluster operating system
- Initially was depending on Docker (now: CRI-O)
- Bring your own SDN, minimal core + plugins

* Kubernetes

Architecture overview:

.image images/k8s-architecture.png _ 700

* Kubernetes: API Server request flow

.image images/k8s-API-server-flow.png _ 450

More details via our blog post series [[https://blog.openshift.com/kubernetes-deep-dive-api-server-part-1/][Kubernetes deep dive: API Server]]

* Kubernetes: API Server

.code -numbers source/k8s_config.go /func DefaultBuildHandlerChain/,/apiHandler\)\)\n}/

: Let's now drill down into the DefaultBuildHandlerChain function

* Consul

.image images/consul-logo.png _ 300

[[https://consul.io]]—a tool for service discovery and configuration

- Not one thing but many things to many people
- Can provide service discovery (microservices architecture)
- Can be used as a key-value store
- Uses Serf lib as [[https://www.consul.io/docs/internals/gossip.html][gossip]] protocol (manage membership/broadcast messages)

* Consul

[[https://www.consul.io/docs/internals/architecture.html][Architecture]] overview:

.image images/consul-architecture.png 500 _

* Consul terminology

- *Agent*: Long running daemon on every member of cluster, able to run in either client or server mode.
- *Client*: An agent that forwards all RPCs to a server, relatively stateless, taking part in the LAN gossip pool.
- *Server*: An agent participating in the Raft quorum, maintaining cluster state, responding to RPC queries, and forwarding queries to leaders.

* Consul: bug hunting

Starting point is [[https://github.com/hashicorp/consul/issues/1580][issue 1580]]:

  I'm chasing a Consul node-flapping issue that is triggered
  by a change of IP address. In our environment, development
  nodes running a Consul agent are configured to go into
  sleep or standby when not in use. Unfortunately the DHCP
  server in this environment assigns a new IP address to each
  of these nodes when the node returns to a running state,
  which means the IP address that Consul advertises is no
  longer associated with the node on which the agent is running.

Following the breadcrumb trail via [[https://github.com/hashicorp/consul/issues/457][issue 457]], [[https://github.com/hashicorp/consul/issues/839][issue 839]], and [[https://github.com/hashicorp/consul/pull/850][PR 850]] we end up in package [[https://github.com/hashicorp/consul/blob/master/agent/][github.com/hashicorp/consul/agent]], file `local.go`.

* Consul agent (part 1/4)

In `local.go` of package `github.com/hashicorp/consul/agent` we find:

.code -numbers source/consul_agent_local.go /\/\/ localState is used/,/nodeInfoInSync bool/ HLdelegate

* Consul agent (part 2/4)

.code -numbers source/consul_agent_local.go /\/\ Services tracks the local services/,/time.Timer/

* Consul agent (part 3/4)

.code -numbers source/consul_agent_local.go /\/\ metadata tracks the local metadata fields/,/}\n}/

* Consul agent (part 4/4)

The `delegate` interface is defined in file `agent.go` of package `github.com/hashicorp/consul/agent`:

.code -numbers source/consul_agent_agent.go /\/\/ delegate defines the interface shared/,/string\n}/

* etcd

.image images/etcd-logo.png _ 200

[[https://coreos.com/etcd]]—a distributed, reliable key-value store

- Distributed setup realized via [[https://raft.github.io/][Raft]]
- Benchmarked at 10,000 writes/sec
- Exposes HTTP and gRPC interfaces
- Automatic TLS with optional client cert authentication

* etcd

A little [[https://coreos.com/etcd/docs/latest/learning/why.html][comparison]] with related systems:

.image images/etcd-vs-zk.png 500 _

* etcd v2 → v3

There was an interesting transition from [[https://coreos.com/etcd/docs/latest/op-guide/v2-migration.html][etcd 2 to 3]]:

- HTTP/JSON → gRPC/protobuf
- hierarchical key space → flat key space
- TTL → leases
- compare-n-swap → transactions

See also my notes on [[https://hackernoon.com/notes-on-moving-from-etcd2-to-etcd3-dedb26057b90][moving from etcd2 to etcd3]].

* etcd v2 → v3 (part 1/4)

In etcd v2 the `key-value` API ([[https://github.com/coreos/etcd/blob/master/client/keys.go][keys.go]]) was:

.code -numbers source/etcd_keysapi2.go /type KeysAPI interface/,/Create\(/ HL1

* etcd v2 → v3 (part 2/4)

.code -numbers source/etcd_keysapi2.go /CreateInOrder/,/Watcher\n}/

* etcd v2 → v3 (part 3/4)

In etcd v3 this API ([[https://github.com/coreos/etcd/blob/master/clientv3/kv.go][kv.go]]) has changed to:

.code -numbers source/etcd_kv3.go /type KV interface/,/Get\(/ HL1

* etcd v2 → v3 (part 4/4)

.code -numbers source/etcd_kv3.go /Delete deletes/,/Txn\n}/ HL2

* CockroachDB

.image images/cockroachdb-logo.png _ 200

[[https://cockroachlabs.com]]—a distributed SQL database

- Primary design goals: scalability, strong consistency, survivability
- Every node in the cluster can act as SQL gateway, mapping and executing SQL statements to key-value operations
- Uses [[http://rocksdb.org][RocksDB]] (variant of Google's LevelDB storage lib) for persistency

* CockroachDB

[[https://github.com/cockroachdb/cockroach/blob/master/docs/design.md][Architecture]] overview:

.image images/cockroachdb-architecture.png 500 _

* CockroachDB

In [[https://www.youtube.com/watch?v=hWNwI5q01gI][The Challenges of Writing a Massive and Complex Go Application]] _Ben_ _Darnell_ _(CTO_ _of_ _CockroachLabs)_, explains why they're using Go for a distributed database:

.image images/cockroachdb-why-go.png _ 400

  We opted for Go when building CockroachDB, a scale-out, relational database, because of its
  support for libraries, interfaces, and tooling. However, it has come with its own frustrations,
  often related to performance and synchronization. And as for Cgo, RocksDB, and other critical
  external libraries, we've had to hunt down or develop creative workarounds to ensure they work
  well the rest of the toolchain. In this talk, we'll share how we've optimized our memory usage to
  mitigate issues related to garbage collection and improved our use of channels to avoid deadlocks.
  We will also share creative techniques to integrate non-Go dependencies into the Go build process.

* CockroachDB

https://github.com/cockroachdb/cockroach/pull/5512

* Minio

.image images/minio-logo.png _ 100

[[https://minio.io]]—object storage server compatible with Amazon S3 APIs

- containers as first class citizens
- up to 5TB sized objects
- uses [[https://docs.minio.io/docs/minio-erasure-code-quickstart-guide][erasure code]] algorithm to protect data
- also offers a fuse driver (MinFS) to mount remote bucket locally

* Minio

Erasure code

* Conclusions

* Conclusions

We see certain patterns emerging. See also [[http://shop.oreilly.com/product/0636920072768.do][Brendan Burns' book]]:

.image images/designing-distributed-systems-book.png _ 380



 [[https://www.usenix.org/conference/hotcloud16/workshop-program/presentation/burns]]

* Conclusions

Some observations from the code reviews carried out in order to prepare this talk:

- subjectively, the top three types of issues encountered were: *timeouts*, *DNS*, and *resource* *exhaustion*
- `go` `doc` is awesome; high level of coverage; *right* *incentives* such as [[http://godoc.org][godoc.org]]
- make it possible to *replicate* test and build *pipeline* *locally*
- … and also, slightly controversial: [[https://medium.com/@mhausenblas/container-assisted-testing-b76ee74278b7][Container Assisted Testing]]

* Conclusions

- Go is a great language for a team to build (complex) distributed systems
- Discipline and a proper testbed are (still) necessary!
- Any chance that we're gravitating towards a common lib for distributed Gomputing?
- Last but not least: [[http://peter.bourgon.org/go-best-practices-2016/][Go best practices, six years in]] also applies

* Questions? Comments?

.image images/q-n-a.gif _ 500

* Kudos go out to …

- [[https://twitter.com/davecheney][Dave Cheney]]
- [[https://twitter.com/bketelsen][Brian Ketelsen]]
- [[https://twitter.com/francesc][Francesc Campoy]]
- [[https://twitter.com/peterbourgon][Peter Bourgon]]
